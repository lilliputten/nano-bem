{"version":3,"sources":["../src/BEMDOM.js"],"names":["inherit","require","$","window","config","utils","modDelim","jsClass","BEMDOM","entitiesRegistry","instances","_uniqueIds","injectContent","method","parent","html","domElem","error","Error","console","domObj","e","length","hydrate","append","prepend","replace","remove","remainSelf","update","children","map","_n","childElem","opt","tagName","bemInstances","data","domEntities","Object","keys","entityName","destroyDomElemEntity","Array","from","declBlock","block","base","props","staticProps","blockClass","isArray","BemBlockProto","unshift","__name","entityClass","declElem","elemClass","elem","getEntityClassName","declMod","mod","convertModHandlersToMethods","checkMod","buildCheckMod","modName","modVal","basePtp","prototype","forEach","name","prop","baseMethod","__base","apply","arguments","self","findEntities","select","results","getEntityName","className","jqResults","findDomEntities","dom","entityDomElem","instance","hydrateDomElemEntity","wasInited","initDomElem","push","getUniqueId","entity","options","assign","prefix","postfix","id","uniqueIdCount","nextUniqueIdCount","getInstancesCount","getInstancesInfo","item","getId","getOrCreateEntityClass","bemProps","parseDomEntityName","isElem","proto","BemElemProto","bemData","params","hydrateDomElem","filter","hasClass","getEntityInstanceDomMods","modPrefix","classesList","split","modsToSet","startsWith","o","initDomElemEntity","__inited","beforeInit","instanceMods","concat","setMod","onInit","afterInit","setTimeout","bind","entities","jsBemClass","domElems","found","find","attr","__destroying","beforeDestroy","onDestroy","delMod","p","indexOf","splice","afterDestroy","fn","bem"],"mappings":"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","sourcesContent":["/** @module BEMDOM\n *  @description BEMDOM\n *  @since 2019.03.09, 22:54\n *  @changed 2019.04.03, 22:16\n *\n *  TODO:\n *    - 2019.03.14, 22:41 -- To ensure not to twice hydrating/initialing dom/entity?\n */\n\nconst inherit = require('inherit');\n\n// const objects = require('lib/objects').default;\n\nconst $ = (window && window.$) || require('jquery');\n\nconst { config } = require('./config');\nconst { utils } = require('./utils');\n\nconst { modDelim, jsClass } = config;\n\nexport const BEMDOM = /** @lends BEMDOM */ {\n\n  // Entities registry (all entity classes)\n  entitiesRegistry: {},\n\n  // List of all instances in use\n  instances: [],\n\n  // modsRegistry: {},\n\n  // Hash for count unique ids...\n  _uniqueIds: {},\n\n  // DOM methods...\n\n  /**\n   * @param {string} method - jQuery method (append, prepend)\n   * @param {jQuery|BemEntity} parent\n   * @param {string|jQuery} html\n   * @return {jQueryCollection|undefined}\n   */\n  injectContent: function(method, parent, html) {\n    // If BemEntity, get jQueryCollection...\n    if (parent.domElem) {\n      parent = parent.domElem;\n    }\n    // Check error\n    if (typeof parent[method] !== 'function') {\n      const error = new Error('BEMDOM: injectContent: jQuery method is absent: ' + method);\n      console.error(error); // eslint-disable-line no-console\n      /*DEBUG*/ debugger; // eslint-disable-line no-debugger\n      throw error;\n    }\n    var domObj;\n    if (typeof html === 'string') {\n      // Catching jquery exception on trying to create dom entity for plain string\n      try {\n        domObj = $(html);\n      }\n      catch(e) {\n        // Pass thru\n      }\n    }\n    else {\n      domObj = html;\n    }\n    // Create dom objects...\n    if (domObj && domObj.length) {\n      parent[method](domObj);\n      this.hydrate(domObj);\n    }\n    // Create raw content\n    else {\n      parent[method](html);\n    }\n    return domObj;\n  },\n\n  /** Append content to dom\n   * @param {jQuery|BemEntity} parent\n   * @param {string|jQuery} html\n   */\n  append: function(parent, html) {\n    return this.injectContent('append', parent, html);\n  },\n  /** Append content to dom\n   * @param {jQuery|BemEntity} parent\n   * @param {string|jQuery} html\n   */\n  prepend: function(parent, html) {\n    return this.injectContent('prepend', parent, html);\n  },\n\n  // TODO: replace\n  /** Replace dom element content\n   * @param {jQuery|BemEntity} parent\n   * @param {string|jQuery} html\n   */\n  replace: function(parent, html) {\n    // Cleanup current dom entities\n    this.remove(parent, { remainSelf: true });\n    // ...and replace it...\n    return this.injectContent('replaceWith', parent, html);\n  },\n\n  /** Replace all previous content with new specified\n   * @param {jQuery|BemEntity} domElem\n   * @param {string|jQuery} html\n   */\n  update: function(domElem, html) {\n    if (domElem) {\n      domElem = domElem.domElem || domElem;\n      const children = domElem.children();\n      children.map((_n, childElem) => {\n        this.remove($(childElem));\n      });\n      // Remove plain html\n      domElem.html('');\n    }\n    this.append(domElem, html);\n    return domElem;\n  },\n\n  /** Remove DOM Node & destroy all bem instances on it\n   * @param {jQuery|BemEntity} domElem\n   * @param {object} [opt]\n   * @param {boolean} [opt.remainSelf]\n   * @return {BEMDOM}\n   */\n  remove: function(domElem, opt) {\n    opt = opt || {};\n    if (domElem) {\n      // BemEntity?\n      domElem = domElem.domElem || domElem;\n      // Raw DOM object? -> jQuery object\n      if (domElem.tagName) {\n        domElem = $(domElem);\n      }\n      const bemInstances = domElem.data('bemInstances') || {};\n      const domEntities = bemInstances && Object.keys(bemInstances) || [];\n      // Destroy all DOM entities...\n      if (domEntities && domEntities.length) {\n        domEntities.map((entityName) => {\n          return this.destroyDomElemEntity(domElem, entityName);\n        });\n      }\n      // Find DOM childs...\n      var children = Array.from(domElem.children());\n      if (children && children.length) {\n        // And remove all of them...\n        children.map(this.remove, this);\n      }\n      if (!opt.remainSelf) {\n        domElem.remove();\n      }\n    }\n    return this;\n  },\n\n  // Decl methods..\n\n  /**\n   * @param {object|string} block - Block name or inherited class\n   * @param {function|Array[function]} [base] - base block + mixes\n   * @param {object} [props]\n   * @param {object} [staticProps]\n   * @return {object} block\n   * Inhertited class form: declBlock(BlockClass)\n   * Props form: declBlock(blockName, base, blockProps, blockStaticProps)\n   */\n  declBlock: function(block, base, props, staticProps) {\n    var blockClass = block;\n    var entityName = block;\n    // Inheriting from props/staticProps\n    if (typeof block === 'string') {\n      // No base? -- Use BemBlock as proto, shift all other args\n      if (typeof base === 'object' && !Array.isArray(base)) {\n        staticProps = props;\n        props = base;\n        base = this.BemBlockProto;\n      }\n      // Base: add BemBlock as first inheritance element\n      else {\n        if (!Array.isArray(base)) {\n          base = [base];\n        }\n        base.unshift(this.BemBlockProto);\n      }\n      // Creating inherited class\n      blockClass = inherit(base, props, staticProps || { block: entityName });\n      /*DEBUG*/ blockClass.__name = entityName;\n    }\n    // Esle -- already inherited class -- fetch name\n    else if (typeof block === 'function') {\n      entityName = blockClass.block;\n    }\n    // Throw error for invalid block parameter?\n    // TODO: To redefine class???\n    if (this.entitiesRegistry[entityName]) {\n      var error = new Error('BEMDOM: Block already defined: ' + entityName);\n      console.error(error); // eslint-disable-line no-console\n      /*DEBUG*/ debugger; // eslint-disable-line no-debugger\n      throw error;\n    }\n    this.entitiesRegistry[entityName] = { entityClass: blockClass };\n    return blockClass;\n  },\n  /**\n   * @param {object} elemClass\n   * @return {object} elemClass\n   */\n  declElem: function(elemClass) {\n    const { block, elem } = elemClass;\n    const entityName = utils.getEntityClassName({ block, elem });\n    if (this.entitiesRegistry[entityName]) {\n      const error = new Error('BEMDOM: Block elem already defined: ' + entityName);\n      console.error(error); // eslint-disable-line no-console\n      /*DEBUG*/ debugger; // eslint-disable-line no-debugger\n      throw error;\n    }\n    this.entitiesRegistry[entityName] = { entityClass: elemClass };\n    return elemClass;\n  },\n\n  /** Declares modifier\n   * @param {Object} base\n   * @param {Object} mod\n   * @param {String} mod.modName\n   * @param {String|Boolean|Array} [mod.modVal]\n   * @param {Object} props\n   * @param {Object} [staticProps]\n   * @returns {Function}\n   */\n  declMod: function(base, mod, props, staticProps) {\n\n    props && utils.convertModHandlersToMethods(props);\n\n    var checkMod = utils.buildCheckMod(mod.modName, mod.modVal);\n    var basePtp = base.prototype;\n\n    // objects.each(props, function(prop, name) {\n    // Object.entries(props).forEach(function([name, prop]) {\n    Object.keys(props).forEach(function(name) {\n      var prop = props[name];\n      if (typeof prop === 'function') {\n        props[name] = function() {\n          var method;\n          if(checkMod(this)) {\n            method = prop;\n          }\n          else {\n            var baseMethod = basePtp[name];\n            if (baseMethod && baseMethod !== prop) {\n              method = this.__base;\n            }\n          }\n          if (method) {\n            return method.apply(this, arguments);\n          }\n        };\n      }\n    });\n\n    return inherit.self(base, props, staticProps);\n\n  },\n\n  /* // Old methods -- trying to override ES6 classes hierarchy (To remove?)\n   *\n   * [>* Old declMod method\n   *  * @param {object|function} testMod\n   *  * @param {object} modClass\n   *  * @return {object} modClass\n   *  <]\n   * declMod: function(base, mod, props, staticProps) {\n   *   const modClass = this._declMod(base, mod, props, staticProps);\n   *   const { block, elem } = modClass;\n   *   let { modName, modVal, testMod } = modClass;\n   *   if (!testMod) {\n   *     testMod = modClass.testMod = { modName };\n   *     if (modVal) {\n   *       testMod.modVal = modVal;\n   *     }\n   *   }\n   *   const entityName = utils.getEntityName({ block, elem });\n   *   // const entityClass = this.getOrCreateEntityClass(entityName);\n   *   const modEntityName = utils.getEntityClassName({ block, elem, modName, modVal });\n   *   if (this.entitiesRegistry[modEntityName]) {\n   *     const error = new Error('Mod already defined: ' + modEntityName);\n   *     console.error(error); // eslint-disable-line no-console\n   *     [>DEBUG<] debugger; // eslint-disable-line no-debugger\n   *     throw error;\n   *   }\n   *   this.entitiesRegistry[modEntityName] = { entityClass: modClass };\n   *   if (!this.modsRegistry[entityName]) {\n   *     this.modsRegistry[entityName] = {};\n   *   }\n   *   // const proto = Object.create(modClass);\n   *   this.modsRegistry[entityName][modEntityName] = { modClass };\n   *   return modClass;\n   * },\n   * [>*\n   *  * @param {Object} modClass\n   *  * @param {string} modName\n   *  * @param {*} [modVal='']\n   *  * @return {boolean}\n   *  <]\n   * _testModClass: function(modClass, modName, modVal='') {\n   *   const { testMod } = modClass;\n   *   if (typeof testMod === 'function') {\n   *     return testMod.call(modClass, modName, modVal);\n   *   }\n   *   else if (typeof testMod === 'object') {\n   *     const testModName = testMod.modName;\n   *     const testModVal = testMod.modVal || true;\n   *     const matched = (testModName === modName && (testModVal === '*' || testModVal === modVal));\n   *     return matched;\n   *   }\n   *   else {\n   *     const error = new Error('Unexpected testMod type: ' + typeof testMod);\n   *     console.error(error); // eslint-disable-line no-console\n   *     [>DEBUG<] debugger; // eslint-disable-line no-debugger\n   *     throw error;\n   *   }\n   * },\n   * [>* Get appropriate mod prototypes\n   *  * @param {BemEntity} instance\n   *  * @param {string} modName\n   *  * @param {*} [modVal='']\n   *  * @return {Object} modClass\n   *  <]\n   * _getAppropriateModProto: function(instance, modName, modVal='') {\n   *   // const { block, elem } = instance;\n   *   const entityName = instance.getEntityName();\n   *   // const modEntityName = instance.getModEntityName(modName, modVal);\n   *   const entityModsRegistry = this.modsRegistry[entityName];\n   *   const entityMods = entityModsRegistry && Object.values(entityModsRegistry);\n   *   const foundModClasses = [];\n   *   // If has declared mods...\n   *   if (entityMods && Array.isArray(entityMods) && entityMods.length) {\n   *     // Test all mods with `modClass.testMod`...\n   *     entityMods.filter((modEntry) => {\n   *       const { modClass } = modEntry;\n   *       if (this._testModClass(modClass, modName, modVal)) {\n   *         // OBSOLETE???\n   *         // if (!modEntry._protoFixed) {\n   *         //   // Set proto to entityClass\n   *         //   const entityClass = this.getOrCreateEntityClass(entityName);\n   *         //   console.log(instance.checkMod);\n   *         //   // Object.setPrototypeOf(modClass.prototype, entityClass.prototype);\n   *         //   Object.setPrototypeOf(instance, modClass.prototype);\n   *         //   modEntry._protoFixed = true;\n   *         // }\n   *         foundModClasses.push(modClass);\n   *       }\n   *     });\n   *   }\n   *   return foundModClasses.length ? foundModClasses[0] : instance.entityClass;\n   * },\n   * [>* Apply mod classes\n   *  * @param {BemEntity} instance\n   *  * @param {string} modName\n   *  * @param {*} [modVal='']\n   *  * @return {BemEntity} instance\n   *  <]\n   * applyModBehavior: function(instance, modName, modVal='') {\n   *   const modClass = this._getAppropriateModProto(instance, modName, modVal);\n   *   if (modClass) {\n   *     // Change proto class\n   *     if (modClass && modClass !== instance._lastProto) {\n   *       Object.setPrototypeOf(instance, modClass.prototype);\n   *       // Object.setPrototypeOf(instance, modClass);\n   *       instance._lastProto = modClass;\n   *     }\n   *   }\n   *   return instance;\n   * },\n   */\n\n  // Traversing...\n\n  /** Find entries in any relation state (parents, childs, siblings)\n   * @param {object} props\n   * @param {string} [props.select=find] - jQuery traverse method name (find, parent, filter etc)\n   * @param {jQuery} props.domElem\n   * @param {string} props.block\n   * @param {string} [props.elem]\n   * @param {string} [props.modName]\n   * @param {*} [props.modVal=true]\n   * @return {jQuery}\n   * TODO Cache results? + cache reset?\n   */\n  findEntities: function({ select, domElem, block, elem, modName, modVal }) {\n    if (!domElem) {\n      const error = new Error('BEMDOM: domElem not specified');\n      console.error(error); // eslint-disable-line no-console\n      /*DEBUG*/ debugger; // eslint-disable-line no-debugger\n      throw error;\n    }\n    if (!block) {\n      const error = new Error('BEMDOM: Property `block` not specified');\n      console.error(error); // eslint-disable-line no-console\n      /*DEBUG*/ debugger; // eslint-disable-line no-debugger\n      throw error;\n    }\n    // select = select || 'find';\n    const results = [];\n    const entityName = utils.getEntityName({ block, elem });\n    const className = utils.getEntityClassName({ block, elem, modName, modVal });\n    const jqResults = utils.findDomEntities(select || 'find', domElem, className);\n    jqResults.map((_n, dom) => {\n      const entityDomElem = $(dom);\n      const bemInstances = entityDomElem.data('bemInstances') || [];\n      let instance = bemInstances[entityName];\n      if (!instance) {\n        instance = this.hydrateDomElemEntity(entityDomElem, entityName);\n      }\n      if (instance && !instance.wasInited()) {\n        this.initDomElem(entityDomElem);\n      }\n      if (instance) {\n        results.push(instance);\n      }\n    });\n    return results;\n  },\n\n  // Entities...\n\n  /**\n   * @param {object|string} props\n   * @param {string} props.block\n   * @param {string} [props.elem]\n   * @param {string} [props.modName]\n   * @param {string|boolean} [props.modVal=true]\n   * @return {string}\n   */\n  getEntityClassName: function(props) {\n    return utils.getEntityClassName(props);\n  },\n\n  /**\n   * @param {string|BemEntity} entity\n   * @param {object} [options]\n   * @param {string} [options.prefix='uniq_']\n   * @param {string} [options.postfix='']\n   * @return {string}\n   */\n  getUniqueId: function(entity, options) {\n    // Default options...\n    options = Object.assign({ prefix: 'uniq_', postfix: '' }, options);\n    // Create id\n    var id = options.prefix + this.getEntityClassName(entity) + options.postfix;\n    // Get current count\n    var uniqueIdCount = this._uniqueIds[id] || 0;\n    // Update next value (and current id number)\n    var nextUniqueIdCount = this._uniqueIds[id] = uniqueIdCount + 1;\n    // Create unique id\n    if (uniqueIdCount) {\n      id += '_' + nextUniqueIdCount;\n    }\n    return id;\n  },\n\n  // Instances...\n\n  /**\n   * @return {number}\n   */\n  getInstancesCount: function() {\n    return this.instances.length;\n  },\n\n  /**\n   * @return {number}\n   */\n  getInstancesInfo: function() {\n    return this.instances.map((item/* , n */) => {\n      return item.getEntityName() + ': ' + item.getId();\n      // return {\n      //   name: item.getEntityName(),\n      //   id: item.getId(),\n      // };\n    });\n  },\n\n  // Hydrate methods...\n\n  /**\n   */\n  getOrCreateEntityClass: function(entityName) {\n\n    // Try to get existing prototype\n    let entityClass = this.entitiesRegistry[entityName] && this.entitiesRegistry[entityName].entityClass;\n\n    // Found?\n    if (entityClass) {\n      return entityClass;\n    }\n\n    // If not found, then crate new one...\n\n    // Get bem props (block, elem, mod...)\n    const bemProps = utils.parseDomEntityName(entityName);\n\n    // Block or elem?\n    const isElem = !!bemProps.elem;\n    const proto = isElem ? this.BemElemProto : this.BemBlockProto;\n\n    // Create and store entity proto dynamically\n    entityClass = inherit(proto, {});\n    Object.assign(entityClass, bemProps);\n    // entityClass = _cls_ dummyProto extends proto {\n    //   constructor({ ...props }) {\n    //     super({ ...props });\n    //   }\n    // }\n    // NOTE 2019.04.02, 18:21 -- Old buggy code\n    // entityClass = function dummyProto({ ...props }) {\n    //   return this.__proto__.constructor({ ...props });\n    // };\n    // entityClass.prototype = Object.create(proto.prototype);\n    // Object.setPrototypeOf(entityClass, proto); // Polyfill?\n\n    // Declare & store prototype\n    if (isElem) {\n      this.declElem(entityClass);\n    }\n    else {\n      this.declBlock(entityClass);\n    }\n\n    return entityClass;\n\n  },\n\n  /** Hydrate one entity (class) on the specified dom element\n   * @param {jQuery} domElem\n   * @param {string} entityName\n   * @return {object|undefined} entityInstance\n   */\n  hydrateDomElemEntity: function(domElem, entityName) {\n\n    // Do we have an entity description?\n    const entityClass = this.getOrCreateEntityClass(entityName);\n\n    // If found prototype class...\n    if (entityClass) {\n\n      // Get entity params\n      const bemData = domElem.data('bem') || {};\n      const params = bemData[entityName] || {};\n\n      // const block = entityClass.block;\n      // const entityName = utils.getEntityName(entityClass);\n\n      const props = {\n        entityClass,\n        domElem,\n        params,\n        // entityName,\n        entityName,\n      };\n\n      // Create entity instance with fetched params\n      // const instance = new entityClass({ ...props });\n      const instance = new entityClass(props);\n\n      const bemInstances = domElem.data('bemInstances') || {};\n      bemInstances[entityName] = instance;\n      domElem.data('bemInstances', bemInstances);\n\n      // Return entity instance\n      return instance;\n\n    }\n\n  },\n  /** Find and reanimate (hydrate) all existing {jsClass} instances on specified dom element\n   * @param {jQuery} domElem\n   * @return {jQuery} domElem\n   */\n  hydrateDomElem: function(domElem) {\n\n    // Get data-bem property on specified dom\n    const bemData = domElem.data('bem');\n\n    // Get data-bem keys (block names)\n    const domEntities = (bemData && Object.keys(bemData)) || [];\n\n    // Walk thru all found instances...\n    // const entities =\n    domEntities\n      .filter(entityName => {\n        return domElem.hasClass(entityName);\n      })\n      .map(entityName => {\n        return this.hydrateDomElemEntity(domElem, entityName);\n      })\n    ;\n\n    return domElem;\n\n  },\n\n  /** Fetch mods from entity css classes\n   * @param {BemEntity} instance\n   * @return {object[]}\n   */\n  getEntityInstanceDomMods: function(instance) {\n    const entityName = instance.getEntityName();\n    const modPrefix = entityName + modDelim;\n    const classesList = instance.domElem[0].className.split(/\\s+/);\n    const modsToSet = classesList\n      .map((className) => {\n        if (className.startsWith(modPrefix)) {\n          const props = utils.parseDomEntityName(className);\n          return props;\n        }\n      })\n      .filter(o => o) // Remove empty entries\n    ;\n    return modsToSet;\n  },\n\n  /** Initialize dom elem entity\n   * @param {jQuery} domElem\n   * @param {string|object} entityName\n   * @return {BemEntity}\n   */\n  initDomElemEntity: function(domElem, entityName) {\n    if (typeof entityName === 'object') {\n      entityName = utils.getEntityClassName(entityName);\n    }\n    const bemInstances = domElem.data('bemInstances') || {};\n    const instance = bemInstances[entityName];\n    if (instance.__inited != null) {\n      // throw?\n      // console.error('Cyclic initialization', entityName, instance); // eslint-disable-line no-console\n      // /*DEBUG*/ debugger; // eslint-disable-line no-debugger\n      return instance;\n    }\n    instance.__inited = false;\n    // Lifecycle: beforeInit\n    if (typeof instance.beforeInit === 'function') {\n      instance.beforeInit();\n    }\n    // Mods to set\n    // TODO: Which mods must come first? -- `js` or all other?\n    const instanceMods = this.getEntityInstanceDomMods(instance);\n    const modsToSet = [{ modName: 'js', modVal: 'inited' }]\n      .concat(instanceMods);\n    // Set mods...\n    modsToSet.map(({ modName, modVal }) => {\n      instance.setMod(modName, modVal);\n    });\n    // Account instance\n    this.instances.push(instance);\n    instance.__inited = true;\n    // Lifecycle: onInit\n    if (typeof instance.onInit === 'function') {\n      instance.onInit();\n    }\n    // TODO: To remove (replace with `onInit`)?\n    if (typeof instance.afterInit === 'function') {\n      setTimeout(instance.afterInit.bind(instance), 0);\n    }\n    return instance;\n  },\n  /** Initialize entities created on given dom node (via `hydrateDomElem` or `hydrateDomElemEntity`)\n   * @param {jQuery} domElem\n   * @return {BemEntity[]}\n   */\n  initDomElem: function(domElem) {\n    const bemInstances = domElem.data('bemInstances') || {};\n    const domEntities = bemInstances && Object.keys(bemInstances) || [];\n    const entities = domEntities.map((entityName) => {\n      return this.initDomElemEntity(domElem, entityName);\n    });\n    return entities;\n  },\n\n  /**\n   * @param {jQuery} [parent=$(document.body)]\n   * @return {BemEntity[]|undefined}\n   */\n  hydrate: function(parent) {\n\n    // DOM root element to hydrate\n    parent = (parent && parent.length != null) ? parent : $('body');\n\n    // Find all {jsClass} enabled dom elements...\n    const jsBemClass = '.' + jsClass + '[data-bem]';\n    let domElems = [];\n    // NOTE 2019.03.25, 00:40 -- Map ensure passing JQueryColletion with multiple elements\n    parent.map((_n, dom) => {\n      const domElem = $(dom);\n      const found = Array.from(domElem.find(jsBemClass)).map(elem => $(elem));\n      if (domElem.hasClass(jsClass) && domElem.attr('data-bem')) {\n        found.unshift(domElem);\n      }\n      domElems = domElems.concat(found);\n    });\n    if (domElems.length) {\n      // Walk thru all found elements...\n      const entities = domElems\n        // Hydrate...\n        .map(domElem => {\n          return this.hydrateDomElem(domElem);\n        })\n        // ...And initialize...\n        .map(domElem => {\n          return this.initDomElem(domElem);\n        })\n      ;\n      return entities; // ???\n    }\n\n    // return [];\n\n  },\n\n  // Destroy...\n\n  /** Destroy bem instance on DOM node\n   * @param {jQuery} domElem\n   * @param {string|object} entityName\n   * @return {domElem}\n   */\n  destroyDomElemEntity: function(domElem, entityName) {\n    if (typeof entityName === 'object') {\n      entityName = utils.getEntityClassName(entityName);\n    }\n    const bemInstances = domElem.data('bemInstances') || {};\n    const instance = bemInstances[entityName];\n    if (instance && !instance.__destroying) {\n      instance.__destroying = true;\n      if (typeof instance.beforeDestroy === 'function') {\n        instance.beforeDestroy();\n      }\n      if (typeof instance.onDestroy === 'function') {\n        instance.onDestroy();\n      }\n      instance.delMod('js', 'inited');\n      delete bemInstances[entityName];\n      var p = this.instances.indexOf(instance);\n      if (p !== -1) {\n        this.instances.splice(p, 1);\n      }\n      // Unaccounted instance?\n      else {\n        const error = new Error('BEMDOM: Unaccounted instance');\n        console.error(error); // eslint-disable-line no-console\n        /*DEBUG*/ debugger; // eslint-disable-line no-debugger\n        throw error;\n      }\n      domElem.data('bemInstances', bemInstances);\n      if (typeof instance.afterDestroy === 'function') {\n        instance.afterDestroy();\n      }\n    }\n    return domElem;\n  },\n\n};\n\n/** Add jQuery method: Initialize or get initialized bem instance for dom node and entity name\n * @param {string|object} entityName\n */\n$.fn.bem = function(entityName) {\n  const domElem = this; // $(this);\n  let instance;\n  if (domElem && domElem.length) {\n    if (typeof entityName === 'object') {\n      entityName = utils.getEntityClassName(entityName);\n    }\n    const bemInstances = domElem.data('bemInstances') || {};\n    instance = bemInstances[entityName];\n    if (!instance) {\n      BEMDOM.hydrateDomElemEntity(domElem, entityName);\n      instance = BEMDOM.initDomElemEntity(domElem, entityName);\n    }\n  }\n  return instance;\n};\n"],"file":"BEMDOM.js"}